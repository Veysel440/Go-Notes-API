openapi: 3.0.3
info:
  title: Notes API
  version: 0.2.0
  description: |
    Basit not servisi.
    Kimlik doğrulama JWT Bearer. Refresh token ile yenileme var.
servers:
  - url: http://localhost:8080
tags:
  - name: health
  - name: auth
  - name: notes
  - name: admin

paths:
  /healthz:
    get:
      tags: [health]
      summary: Liveness
      responses:
        '204': { description: OK }

  /readyz:
    get:
      tags: [health]
      summary: Readiness (DB ping)
      responses:
        '204': { description: OK }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /info:
    get:
      tags: [health]
      summary: Basit bilgi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { ok: { type: boolean } } }

  /auth/register:
    post:
      tags: [auth]
      summary: Yeni kullanıcı oluştur
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Creds' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { id: { type: integer, format: int64 } } }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/Validation' }

  /auth/login:
    post:
      tags: [auth]
      summary: Giriş yap ve erişim/yenileme tokenları al
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Creds' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tokens' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooMany' }

  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh token ile erişim tokenı üret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh]
              properties: { refresh: { type: string } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: { access: { type: string } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /notes:
    get:
      tags: [notes]
      summary: Not listele
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NoteList' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [notes]
      summary: Not oluştur
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NoteCreate' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { id: { type: integer, format: int64 } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /notes/{id}:
    get:
      tags: [notes]
      summary: Not getir
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/NoteId'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Note' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    put:
      tags: [notes]
      summary: Not güncelle
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/NoteId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NoteUpdate' }
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [notes]
      summary: Not sil
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/NoteId'
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /admin/ping:
    get:
      tags: [admin]
      summary: Admin canlılık
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/users:
    get:
      tags: [admin]
      summary: Kullanıcı listesi (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserListResponse' }
        '403': { $ref: '#/components/responses/Forbidden' }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }

  parameters:
    NoteId:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    Q:
      in: query
      name: q
      schema: { type: string }
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    Size:
      in: query
      name: size
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }

  responses:
    Unauthorized: { description: Unauthorized }
    Forbidden: { description: Forbidden }
    NotFound: { description: Not Found }
    Conflict: { description: Conflict }
    Validation: { description: Validation error }
    TooMany: { description: Too many requests }
    ServiceUnavailable: { description: Service unavailable }

  schemas:
    Creds:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8, maxLength: 128 }

    Tokens:
      type: object
      properties:
        access: { type: string, description: JWT access token }
        refresh: { type: string, description: Opaque refresh token }

    Note:
      type: object
      properties:
        id: { type: integer, format: int64 }
        title: { type: string }
        body: { type: string }

    NoteCreate:
      type: object
      required: [title, body]
      properties:
        title: { type: string }
        body: { type: string }

    NoteUpdate:
      type: object
      properties:
        title: { type: string }
        body: { type: string }

    NoteList:
      type: array
      items: { $ref: '#/components/schemas/Note' }

    User:
      type: object
      properties:
        id: { type: integer, format: int64 }
        email: { type: string, format: email }

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }
        page: { type: integer }
        size: { type: integer }
        total: { type: integer, format: int64 }
