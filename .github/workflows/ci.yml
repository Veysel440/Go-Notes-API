name: ci

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: "1.22" }
      - name: Cache Go
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
      - name: Tidy
        run: go mod tidy
      - name: Test
        run: go test ./... -count=1
      - name: Build
        run: CGO_ENABLED=0 go build -o bin/api ./cmd/api
      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with: { version: v1.59, args: --timeout=5m }
      - name: Govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '1.22'
          go-package: ./...

  docker:
    needs: build-test-lint
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag

      - name: Primary tag to env
        run: echo "PRIMARY_TAG=$(echo '${{ steps.meta.outputs.json }}' | jq -r '.tags[0]')" >> $GITHUB_ENV

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.PRIMARY_TAG }}
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: SBOM (syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.PRIMARY_TAG }}
          artifact-name: sbom.spdx.json
